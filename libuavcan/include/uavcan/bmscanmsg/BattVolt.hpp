/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Projects_2\RevdA6vg\Src\bmscanmsg\BattVolt.uavcan
 */

#ifndef BMSCANMSG_BATTVOLT_HPP_INCLUDED
#define BMSCANMSG_BATTVOLT_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
# This message does not expect any inputs
#
#
#
#battery one voltage
#batter two voltage
#
float16 batt1
float16 batt2
#
******************************************************************************/

/********************* DSDL signature source definition ***********************
bmscanmsg.BattVolt
saturated float16 batt1
saturated float16 batt2
******************************************************************************/

#undef batt1
#undef batt2

namespace bmscanmsg
{

template <int _tmpl>
struct UAVCAN_EXPORT BattVolt_
{
    typedef const BattVolt_<_tmpl>& ParameterType;
    typedef BattVolt_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > batt1;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > batt2;
    };

    enum
    {
        MinBitLen
            = FieldTypes::batt1::MinBitLen
            + FieldTypes::batt2::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::batt1::MaxBitLen
            + FieldTypes::batt2::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::batt1 >::Type batt1;
    typename ::uavcan::StorageType< typename FieldTypes::batt2 >::Type batt2;

    BattVolt_()
        : batt1()
        , batt2()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<32 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    // This type has no default data type ID

    static const char* getDataTypeFullName()
    {
        return "bmscanmsg.BattVolt";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool BattVolt_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        batt1 == rhs.batt1 &&
        batt2 == rhs.batt2;
}

template <int _tmpl>
bool BattVolt_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(batt1, rhs.batt1) &&
        ::uavcan::areClose(batt2, rhs.batt2);
}

template <int _tmpl>
int BattVolt_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::batt1::encode(self.batt1, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::batt2::encode(self.batt2, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int BattVolt_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::batt1::decode(self.batt1, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::batt2::decode(self.batt2, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature BattVolt_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x72DD43F9376BAED9ULL);

    FieldTypes::batt1::extendDataTypeSignature(signature);
    FieldTypes::batt2::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef BattVolt_<0> BattVolt;

// No default registration

} // Namespace bmscanmsg

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::bmscanmsg::BattVolt >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::bmscanmsg::BattVolt::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::bmscanmsg::BattVolt >::stream(Stream& s, ::bmscanmsg::BattVolt::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "batt1: ";
    YamlStreamer< ::bmscanmsg::BattVolt::FieldTypes::batt1 >::stream(s, obj.batt1, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "batt2: ";
    YamlStreamer< ::bmscanmsg::BattVolt::FieldTypes::batt2 >::stream(s, obj.batt2, level + 1);
}

}

namespace bmscanmsg
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::bmscanmsg::BattVolt::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::bmscanmsg::BattVolt >::stream(s, obj, 0);
    return s;
}

} // Namespace bmscanmsg

#endif // BMSCANMSG_BATTVOLT_HPP_INCLUDED